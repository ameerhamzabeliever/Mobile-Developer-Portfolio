{"ast":null,"code":"var _jsxFileName = \"/Users/ameerhamza/Downloads/Development/Mobile-Developer-Portfolio/src/containers/blogs/Blogs.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport \"./Blog.scss\";\nimport { blogSection } from \"../../portfolio\";\nimport { Fade } from \"react-reveal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Blogs() {\n  _s();\n  const {\n    isDark\n  } = useContext(StyleContext);\n  const [mediumBlogs, setMediumBlogs] = useState([]);\n  function setMediumBlogsFunction(array) {\n    setMediumBlogs(array);\n  }\n  //Medium API returns blogs' content in HTML format. Below function extracts blogs' text content within paragraph tags\n  function extractTextContent(html) {\n    return typeof html === \"string\" ? html.split(/<\\/p>/i).map(part => part.split(/<p[^>]*>/i).pop()).filter(el => el.trim().length > 0).map(el => el.replace(/<\\/?[^>]+(>|$)/g, \"\").trim()).join(\" \") : NaN;\n  }\n  useEffect(() => {\n    if (blogSection.displayMediumBlogs === \"true\") {\n      const getProfileData = () => {\n        fetch(\"/blogs.json\").then(result => {\n          if (result.ok) {\n            return result.json();\n          }\n        }).then(response => {\n          setMediumBlogsFunction(response.items);\n        }).catch(function (error) {\n          console.error(`${error} (because of this error Blogs section could not be displayed. Blogs section has reverted to default)`);\n          setMediumBlogsFunction(\"Error\");\n          blogSection.displayMediumBlogs = \"false\";\n        });\n      };\n      getProfileData();\n    }\n  }, []);\n  if (!blogSection.display) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Fade, {\n    bottom: true,\n    duration: 1000,\n    distance: \"20px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Blogs, \"YG8H31ig8IVD013kwNmkki538dE=\");\n_c = Blogs;\nvar _c;\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"names":["React","blogSection","Fade","jsxDEV","_jsxDEV","Blogs","_s","isDark","useContext","StyleContext","mediumBlogs","setMediumBlogs","useState","setMediumBlogsFunction","array","extractTextContent","html","split","map","part","pop","filter","el","trim","length","replace","join","NaN","useEffect","displayMediumBlogs","getProfileData","fetch","then","result","ok","json","response","items","catch","error","console","display","bottom","duration","distance","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ameerhamza/Downloads/Development/Mobile-Developer-Portfolio/src/containers/blogs/Blogs.js"],"sourcesContent":["import React from \"react\";\nimport \"./Blog.scss\";\nimport {blogSection} from \"../../portfolio\";\nimport {Fade} from \"react-reveal\";\nexport default function Blogs() {\n  const {isDark} = useContext(StyleContext);\n  const [mediumBlogs, setMediumBlogs] = useState([]);\n  function setMediumBlogsFunction(array) {\n    setMediumBlogs(array);\n  }\n  //Medium API returns blogs' content in HTML format. Below function extracts blogs' text content within paragraph tags\n  function extractTextContent(html) {\n    return typeof html === \"string\"\n      ? html\n          .split(/<\\/p>/i)\n          .map(part => part.split(/<p[^>]*>/i).pop())\n          .filter(el => el.trim().length > 0)\n          .map(el => el.replace(/<\\/?[^>]+(>|$)/g, \"\").trim())\n          .join(\" \")\n      : NaN;\n  }\n  useEffect(() => {\n    if (blogSection.displayMediumBlogs === \"true\") {\n      const getProfileData = () => {\n        fetch(\"/blogs.json\")\n          .then(result => {\n            if (result.ok) {\n              return result.json();\n            }\n          })\n          .then(response => {\n            setMediumBlogsFunction(response.items);\n          })\n          .catch(function (error) {\n            console.error(\n              `${error} (because of this error Blogs section could not be displayed. Blogs section has reverted to default)`\n            );\n            setMediumBlogsFunction(\"Error\");\n            blogSection.displayMediumBlogs = \"false\";\n          });\n      };\n      getProfileData();\n    }\n  }, []);\n  if (!blogSection.display) {\n    return null;\n  }\n  return (\n    <Fade bottom duration={1000} distance=\"20px\">\n      {/* <div className=\"main\" id=\"blogs\">\n        <div className=\"blog-header\">\n          <h1 className=\"blog-header-text\">{blogSection.title}</h1>\n          <p\n            className={\n              isDark ? \"dark-mode blog-subtitle\" : \"subTitle blog-subtitle\"\n            }\n          >\n            {blogSection.subtitle}\n          </p>\n        </div>\n        <div className=\"blog-main-div\">\n          <div className=\"blog-text-div\">\n            {blogSection.displayMediumBlogs !== \"true\" ||\n            mediumBlogs === \"Error\"\n              ? blogSection.blogs.map((blog, i) => {\n                  return (\n                    <BlogCard\n                      key={i}\n                      isDark={isDark}\n                      blog={{\n                        url: blog.url,\n                        image: blog.image,\n                        title: blog.title,\n                        description: blog.description\n                      }}\n                    />\n                  );\n                })\n              : mediumBlogs.map((blog, i) => {\n                  return (\n                    <BlogCard\n                      key={i}\n                      isDark={isDark}\n                      blog={{\n                        url: blog.link,\n                        title: blog.title,\n                        description: extractTextContent(blog.content)\n                      }}\n                    />\n                  );\n                })}\n          </div>\n        </div>\n      </div> */}\n    </Fade>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AACpB,SAAQC,WAAW,QAAO,iBAAiB;AAC3C,SAAQC,IAAI,QAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClC,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IAACC;EAAM,CAAC,GAAGC,UAAU,CAACC,YAAY,CAAC;EACzC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAClD,SAASC,sBAAsBA,CAACC,KAAK,EAAE;IACrCH,cAAc,CAACG,KAAK,CAAC;EACvB;EACA;EACA,SAASC,kBAAkBA,CAACC,IAAI,EAAE;IAChC,OAAO,OAAOA,IAAI,KAAK,QAAQ,GAC3BA,IAAI,CACDC,KAAK,CAAC,QAAQ,CAAC,CACfC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACF,KAAK,CAAC,WAAW,CAAC,CAACG,GAAG,CAAC,CAAC,CAAC,CAC1CC,MAAM,CAACC,EAAE,IAAIA,EAAE,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,CAAC,CAClCN,GAAG,CAACI,EAAE,IAAIA,EAAE,CAACG,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC,CACnDG,IAAI,CAAC,GAAG,CAAC,GACZC,GAAG;EACT;EACAC,SAAS,CAAC,MAAM;IACd,IAAI3B,WAAW,CAAC4B,kBAAkB,KAAK,MAAM,EAAE;MAC7C,MAAMC,cAAc,GAAGA,CAAA,KAAM;QAC3BC,KAAK,CAAC,aAAa,CAAC,CACjBC,IAAI,CAACC,MAAM,IAAI;UACd,IAAIA,MAAM,CAACC,EAAE,EAAE;YACb,OAAOD,MAAM,CAACE,IAAI,CAAC,CAAC;UACtB;QACF,CAAC,CAAC,CACDH,IAAI,CAACI,QAAQ,IAAI;UAChBvB,sBAAsB,CAACuB,QAAQ,CAACC,KAAK,CAAC;QACxC,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUC,KAAK,EAAE;UACtBC,OAAO,CAACD,KAAK,CACV,GAAEA,KAAM,sGACX,CAAC;UACD1B,sBAAsB,CAAC,OAAO,CAAC;UAC/BZ,WAAW,CAAC4B,kBAAkB,GAAG,OAAO;QAC1C,CAAC,CAAC;MACN,CAAC;MACDC,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,EAAE,CAAC;EACN,IAAI,CAAC7B,WAAW,CAACwC,OAAO,EAAE;IACxB,OAAO,IAAI;EACb;EACA,oBACErC,OAAA,CAACF,IAAI;IAACwC,MAAM;IAACC,QAAQ,EAAE,IAAK;IAACC,QAAQ,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OA8CtC,CAAC;AAEX;AAAC1C,EAAA,CA5FuBD,KAAK;AAAA4C,EAAA,GAAL5C,KAAK;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}