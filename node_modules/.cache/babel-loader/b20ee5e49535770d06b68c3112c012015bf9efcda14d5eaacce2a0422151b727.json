{"ast":null,"code":"import React,{useContext}from\"react\";import{useTranslation}from\"react-i18next\";import\"./WorkExperience.scss\";import ExperienceCard from\"../../components/experienceCard/ExperienceCard\";import{workExperiences}from\"../../portfolio\";import{Fade}from\"react-reveal\";import StyleContext from\"../../contexts/StyleContext\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function WorkExperience(){const{t}=useTranslation();const{isDark}=useContext(StyleContext);if(workExperiences.display){return/*#__PURE__*/_jsx(\"div\",{id:\"experience\",children:/*#__PURE__*/_jsx(Fade,{bottom:true,duration:1000,distance:\"20px\",children:/*#__PURE__*/_jsx(\"div\",{className:\"experience-container\",id:\"workExperience\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"experience-heading\",children:t('experience.title')}),/*#__PURE__*/_jsx(\"div\",{className:\"experience-cards-div\",children:workExperiences.experience.map((card,i)=>{// Map dynamic translations for each experience\nconst getExperienceText=(company,field)=>{const companyKey=company.toLowerCase().replace(/\\s+/g,'');return t(`experience.${companyKey}.${field}`,card[field]);};const translatedCard={...card,role:getExperienceText(card.company,'role'),desc:getExperienceText(card.company,'description'),heading:getExperienceText(card.company,'heading'),descBullets:card.descBullets?card.descBullets.map((bullet,index)=>t(`experience.${card.company.toLowerCase().replace(/\\s+/g,'')}.points.${index}`,bullet)):[]};return/*#__PURE__*/_jsx(ExperienceCard,{isDark:isDark,cardInfo:translatedCard},i);})})]})})})});}return null;}","map":{"version":3,"names":["React","useContext","useTranslation","ExperienceCard","workExperiences","Fade","StyleContext","jsx","_jsx","jsxs","_jsxs","WorkExperience","t","isDark","display","id","children","bottom","duration","distance","className","experience","map","card","i","getExperienceText","company","field","companyKey","toLowerCase","replace","translatedCard","role","desc","heading","descBullets","bullet","index","cardInfo"],"sources":["/Users/ameerhamza/Downloads/Development/Mobile-Developer-Portfolio/src/containers/workExperience/WorkExperience.js"],"sourcesContent":["import React, {useContext} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./WorkExperience.scss\";\nimport ExperienceCard from \"../../components/experienceCard/ExperienceCard\";\nimport {workExperiences} from \"../../portfolio\";\nimport {Fade} from \"react-reveal\";\nimport StyleContext from \"../../contexts/StyleContext\";\n\nexport default function WorkExperience() {\n  const { t } = useTranslation();\n  const {isDark} = useContext(StyleContext);\n  if (workExperiences.display) {\n    return (\n      <div id=\"experience\">\n        <Fade bottom duration={1000} distance=\"20px\">\n          <div className=\"experience-container\" id=\"workExperience\">\n            <div>\n              <h1 className=\"experience-heading\">{t('experience.title')}</h1>\n              <div className=\"experience-cards-div\">\n                {workExperiences.experience.map((card, i) => {\n                  // Map dynamic translations for each experience\n                  const getExperienceText = (company, field) => {\n                    const companyKey = company.toLowerCase().replace(/\\s+/g, '');\n                    return t(`experience.${companyKey}.${field}`, card[field]);\n                  };\n                  \n                  const translatedCard = {\n                    ...card,\n                    role: getExperienceText(card.company, 'role'),\n                    desc: getExperienceText(card.company, 'description'),\n                    heading: getExperienceText(card.company, 'heading'),\n                    descBullets: card.descBullets ? card.descBullets.map((bullet, index) => \n                      t(`experience.${card.company.toLowerCase().replace(/\\s+/g, '')}.points.${index}`, bullet)\n                    ) : []\n                  };\n                  \n                  return (\n                    <ExperienceCard\n                      key={i}\n                      isDark={isDark}\n                      cardInfo={translatedCard}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </Fade>\n      </div>\n    );\n  }\n  return null;\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,UAAU,KAAO,OAAO,CACvC,OAASC,cAAc,KAAQ,eAAe,CAC9C,MAAO,uBAAuB,CAC9B,MAAO,CAAAC,cAAc,KAAM,gDAAgD,CAC3E,OAAQC,eAAe,KAAO,iBAAiB,CAC/C,OAAQC,IAAI,KAAO,cAAc,CACjC,MAAO,CAAAC,YAAY,KAAM,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEvD,cAAe,SAAS,CAAAC,cAAcA,CAAA,CAAG,CACvC,KAAM,CAAEC,CAAE,CAAC,CAAGV,cAAc,CAAC,CAAC,CAC9B,KAAM,CAACW,MAAM,CAAC,CAAGZ,UAAU,CAACK,YAAY,CAAC,CACzC,GAAIF,eAAe,CAACU,OAAO,CAAE,CAC3B,mBACEN,IAAA,QAAKO,EAAE,CAAC,YAAY,CAAAC,QAAA,cAClBR,IAAA,CAACH,IAAI,EAACY,MAAM,MAACC,QAAQ,CAAE,IAAK,CAACC,QAAQ,CAAC,MAAM,CAAAH,QAAA,cAC1CR,IAAA,QAAKY,SAAS,CAAC,sBAAsB,CAACL,EAAE,CAAC,gBAAgB,CAAAC,QAAA,cACvDN,KAAA,QAAAM,QAAA,eACER,IAAA,OAAIY,SAAS,CAAC,oBAAoB,CAAAJ,QAAA,CAAEJ,CAAC,CAAC,kBAAkB,CAAC,CAAK,CAAC,cAC/DJ,IAAA,QAAKY,SAAS,CAAC,sBAAsB,CAAAJ,QAAA,CAClCZ,eAAe,CAACiB,UAAU,CAACC,GAAG,CAAC,CAACC,IAAI,CAAEC,CAAC,GAAK,CAC3C;AACA,KAAM,CAAAC,iBAAiB,CAAGA,CAACC,OAAO,CAAEC,KAAK,GAAK,CAC5C,KAAM,CAAAC,UAAU,CAAGF,OAAO,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,CAC5D,MAAO,CAAAlB,CAAC,CAAE,cAAagB,UAAW,IAAGD,KAAM,EAAC,CAAEJ,IAAI,CAACI,KAAK,CAAC,CAAC,CAC5D,CAAC,CAED,KAAM,CAAAI,cAAc,CAAG,CACrB,GAAGR,IAAI,CACPS,IAAI,CAAEP,iBAAiB,CAACF,IAAI,CAACG,OAAO,CAAE,MAAM,CAAC,CAC7CO,IAAI,CAAER,iBAAiB,CAACF,IAAI,CAACG,OAAO,CAAE,aAAa,CAAC,CACpDQ,OAAO,CAAET,iBAAiB,CAACF,IAAI,CAACG,OAAO,CAAE,SAAS,CAAC,CACnDS,WAAW,CAAEZ,IAAI,CAACY,WAAW,CAAGZ,IAAI,CAACY,WAAW,CAACb,GAAG,CAAC,CAACc,MAAM,CAAEC,KAAK,GACjEzB,CAAC,CAAE,cAAaW,IAAI,CAACG,OAAO,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,CAAE,EAAE,CAAE,WAAUO,KAAM,EAAC,CAAED,MAAM,CAC1F,CAAC,CAAG,EACN,CAAC,CAED,mBACE5B,IAAA,CAACL,cAAc,EAEbU,MAAM,CAAEA,MAAO,CACfyB,QAAQ,CAAEP,cAAe,EAFpBP,CAGN,CAAC,CAEN,CAAC,CAAC,CACC,CAAC,EACH,CAAC,CACH,CAAC,CACF,CAAC,CACJ,CAAC,CAEV,CACA,MAAO,KAAI,CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}